{
  "README.html": {
    "href": "README.html",
    "title": "JitIlVerification | JitIlVerification",
    "keywords": "JitIlVerification This project implements the verification of .NET assemblies at runtime. Verified assemblies are guaranteed to have valid Common Intermediate Language (CIL) bytecode, and cannot directly cause memory unsafety or undefined behavior. This project is a fork of the Microsoft.ILVerification library, which verifies assemblies by loading them (and all of their dependencies) from disk. The original library functions mainly as a compile-time static analysis tool. It is unsuited for verification of assemblies that a deployed application is loading, because the system libraries or other dependencies may not be known or available on disk. The main contribution of JitIlVerification is to integrate Microsoft's verification library with the C# runtime type system, so that assembly validation can occur at runtime. Why use this The original .NET runtime for Windows came with CIL verification. Whenever an assembly was loaded, if the assembly had partial/low trust (because it was loaded from an untrusted source, like the web) the runtime would verify the assembly to ensure that its CIL was valid. In .NET Core, however, this functionality has been removed. The .NET Core runtime will accept and load invalid or unsafe CIL. This makes it impossible to sandbox C# assemblies or load code from an untrusted source, since that code could have undefined behavior. This library re-adds runtime CIL verification. How to use this For detailed information, see the docs. JitIlVerification defines a single public type - the VerifiableAssemblyLoader. This is a drop-in replacement for a System.Runtime.AssemblyLoadContext, but any assemblies loaded with the VerifiableAssemblyLoader will be checked for invalid CIL. If an invalid method from the assembly is called, an exception will immediately be thrown. How it works Whenever an assembly is loaded with VerifiableAssemblyLoader, the assembly bytecode is modified using Mono.Cecil. Guard instructions are inserted at the beginning of every CIL method. The assembly is loaded normally by the .NET Core runtime. When one of the guard instructions is hit for the first time, it passes the declaring method handle to the ILVerification algorithm. The algorithm loads the method bytecode using reflection and verifies it using the runtime type system. If the method was verifiable, then it will run successfully. Otherwise, any attempt to call the method will throw an exception."
  },
  "api/DouglasDwyer.JitIlVerification.VerifiableAssemblyLoader.html": {
    "href": "api/DouglasDwyer.JitIlVerification.VerifiableAssemblyLoader.html",
    "title": "Class VerifiableAssemblyLoader | JitIlVerification",
    "keywords": "Class VerifiableAssemblyLoader Provides scoped assembly loading with the same semantics as AssemblyLoadContext. Any assemblies loaded with this context will be checked for type/memory safety issues. Any unverifiable methods with throw an exception upon invocation. Inheritance object VerifiableAssemblyLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: DouglasDwyer.JitIlVerification Assembly: JitIlVerification.dll Syntax public class VerifiableAssemblyLoader Constructors | Edit this page View Source VerifiableAssemblyLoader() Initializes a new instance of the VerifiableAssemblyLoader class. Declaration public VerifiableAssemblyLoader() | Edit this page View Source VerifiableAssemblyLoader(bool) Initializes a new instance of the VerifiableAssemblyLoader class with a value that indicates whether unloading is enabled. Declaration public VerifiableAssemblyLoader(bool isCollectible) Parameters Type Name Description bool isCollectible Whether this context should be able to unload. | Edit this page View Source VerifiableAssemblyLoader(string, bool) Initializes a new instance of the VerifiableAssemblyLoader class with a name and a value that indicates whether unloading is enabled. Declaration public VerifiableAssemblyLoader(string name, bool isCollectible) Parameters Type Name Description string name The display name of the load context. bool isCollectible Whether this context should be able to unload. Properties | Edit this page View Source IsCollectible Gets a value that indicates whether this VerifiableAssemblyLoader is collectible. Declaration public bool IsCollectible { get; } Property Value Type Description bool | Edit this page View Source Name Get the name of the VerifiableAssemblyLoader. Declaration public string? Name { get; } Property Value Type Description string Methods | Edit this page View Source InstrumentAssembly(AssemblyDefinition) Adds verification guards to all methods in the assembly. The first time that any method is invoked, it will call the verifier on itself. Declaration protected virtual void InstrumentAssembly(AssemblyDefinition assembly) Parameters Type Name Description AssemblyDefinition assembly The assembly to instrument. | Edit this page View Source Load(AssemblyName) When overridden in a derived class, allows an assembly to be resolved based on its AssemblyName. Declaration protected virtual Assembly? Load(AssemblyName assemblyName) Parameters Type Name Description AssemblyName assemblyName The object that describes the assembly to be resolved. Returns Type Description Assembly The resolved assembly, or null. | Edit this page View Source LoadFromAssemblyName(AssemblyName) Resolves and loads an assembly given its AssemblyName. Declaration public Assembly LoadFromAssemblyName(AssemblyName assemblyName) Parameters Type Name Description AssemblyName assemblyName The object that describes the assembly to load. Returns Type Description Assembly The resolved assembly, or null. | Edit this page View Source LoadFromAssemblyPath(string) Loads the contents of an assembly file on the specified path. Declaration public Assembly LoadFromAssemblyPath(string assemblyPath) Parameters Type Name Description string assemblyPath The fully qualified path of the file to load. Returns Type Description Assembly The loaded assembly. | Edit this page View Source LoadFromStream(Stream) Loads the assembly with a common object file format (COFF)-based image containing a managed assembly. Declaration public Assembly LoadFromStream(Stream assembly) Parameters Type Name Description Stream assembly A byte array that is a COFF-based image containing a managed assembly. Returns Type Description Assembly The loaded assembly. | Edit this page View Source LoadFromStream(Stream, Stream?) Loads the assembly with a common object file format (COFF)-based image containing a managed assembly, optionally including symbols for the assembly. Declaration public Assembly LoadFromStream(Stream assembly, Stream? assemblySymbols) Parameters Type Name Description Stream assembly A byte array that is a COFF-based image containing a managed assembly. Stream assemblySymbols A byte array that contains the raw bytes representing the symbols for the assembly. Returns Type Description Assembly The loaded assembly. | Edit this page View Source LoadUnmanagedDll(string) Allows derived class to load an unmanaged library by name. Declaration protected virtual nint LoadUnmanagedDll(string unmanagedDllName) Parameters Type Name Description string unmanagedDllName Name of the unmanaged library. Typically this is the filename without its path or extensions. Returns Type Description nint A handle to the loaded library, or Zero. | Edit this page View Source LoadUnmanagedDllFromPath(string) Loads an unmanaged library from the specified path. Declaration protected nint LoadUnmanagedDllFromPath(string unmanagedDllPath) Parameters Type Name Description string unmanagedDllPath The path to the unmanaged library. Returns Type Description nint The OS handle for the loaded native library. | Edit this page View Source SetProfileOptimizationRoot(string) Sets the root path where the optimization profiles for this load context are stored. Declaration public void SetProfileOptimizationRoot(string directoryPath) Parameters Type Name Description string directoryPath The full path to the directory where the optimization profiles are stored. | Edit this page View Source StartProfileOptimization(string?) Starts the profile optimization for the specified profile. Declaration public void StartProfileOptimization(string? profile) Parameters Type Name Description string profile The name of the optimization profile. | Edit this page View Source Unload() Initiates an unload of this VerifiableAssemblyLoader. Declaration public void Unload() Events | Edit this page View Source Resolving Occurs when the resolution of an assembly fails when attempting to load into this assembly load context. Declaration public event Func<AssemblyLoadContext, AssemblyName, Assembly?>? Resolving Event Type Type Description Func<AssemblyLoadContext, AssemblyName, Assembly> | Edit this page View Source ResolvingUnmanagedDll Occurs when the resolution of a native library fails. Declaration public event Func<Assembly, string, nint>? ResolvingUnmanagedDll Event Type Type Description Func<Assembly, string, nint> | Edit this page View Source Unloading Occurs when the VerifiableAssemblyLoader is unloaded. Declaration public event Action<AssemblyLoadContext>? Unloading Event Type Type Description Action<AssemblyLoadContext>"
  },
  "api/DouglasDwyer.JitIlVerification.html": {
    "href": "api/DouglasDwyer.JitIlVerification.html",
    "title": "Namespace DouglasDwyer.JitIlVerification | JitIlVerification",
    "keywords": "Namespace DouglasDwyer.JitIlVerification Classes VerifiableAssemblyLoader Provides scoped assembly loading with the same semantics as AssemblyLoadContext. Any assemblies loaded with this context will be checked for type/memory safety issues. Any unverifiable methods with throw an exception upon invocation."
  },
  "api/Dwyer.JitIlVerification.VerifiableAssemblyLoader.html": {
    "href": "api/Dwyer.JitIlVerification.VerifiableAssemblyLoader.html",
    "title": "Class VerifiableAssemblyLoader | JitIlVerification",
    "keywords": "Class VerifiableAssemblyLoader Provides scoped assembly loading with the same semantics as AssemblyLoadContext. Any assemblies loaded with this context will be checked for type/memory safety issues. Any unverifiable methods with throw an exception upon invocation. Inheritance object VerifiableAssemblyLoader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: Dwyer.JitIlVerification Assembly: JitIlVerification.dll Syntax public class VerifiableAssemblyLoader Constructors | Edit this page View Source VerifiableAssemblyLoader() Initializes a new instance of the VerifiableAssemblyLoader class. Declaration public VerifiableAssemblyLoader() | Edit this page View Source VerifiableAssemblyLoader(bool) Initializes a new instance of the VerifiableAssemblyLoader class with a value that indicates whether unloading is enabled. Declaration public VerifiableAssemblyLoader(bool isCollectible) Parameters Type Name Description bool isCollectible Whether this context should be able to unload. | Edit this page View Source VerifiableAssemblyLoader(string, bool) Initializes a new instance of the VerifiableAssemblyLoader class with a name and a value that indicates whether unloading is enabled. Declaration public VerifiableAssemblyLoader(string name, bool isCollectible) Parameters Type Name Description string name The display name of the load context. bool isCollectible Whether this context should be able to unload. Properties | Edit this page View Source IsCollectible Gets a value that indicates whether this VerifiableAssemblyLoader is collectible. Declaration public bool IsCollectible { get; } Property Value Type Description bool | Edit this page View Source Name Get the name of the VerifiableAssemblyLoader. Declaration public string? Name { get; } Property Value Type Description string Methods | Edit this page View Source InstrumentAssembly(AssemblyDefinition) Adds verification guards to all methods in the assembly. The first time that any method is invoked, it will call the verifier on itself. Declaration protected virtual void InstrumentAssembly(AssemblyDefinition assembly) Parameters Type Name Description AssemblyDefinition assembly The assembly to instrument. | Edit this page View Source Load(AssemblyName) When overridden in a derived class, allows an assembly to be resolved based on its AssemblyName. Declaration protected virtual Assembly? Load(AssemblyName assemblyName) Parameters Type Name Description AssemblyName assemblyName The object that describes the assembly to be resolved. Returns Type Description Assembly The resolved assembly, or null. | Edit this page View Source LoadFromAssemblyName(AssemblyName) Resolves and loads an assembly given its AssemblyName. Declaration public Assembly LoadFromAssemblyName(AssemblyName assemblyName) Parameters Type Name Description AssemblyName assemblyName The object that describes the assembly to load. Returns Type Description Assembly The resolved assembly, or null. | Edit this page View Source LoadFromAssemblyPath(string) Loads the contents of an assembly file on the specified path. Declaration public Assembly LoadFromAssemblyPath(string assemblyPath) Parameters Type Name Description string assemblyPath The fully qualified path of the file to load. Returns Type Description Assembly The loaded assembly. | Edit this page View Source LoadFromStream(Stream) Loads the assembly with a common object file format (COFF)-based image containing a managed assembly. Declaration public Assembly LoadFromStream(Stream assembly) Parameters Type Name Description Stream assembly A byte array that is a COFF-based image containing a managed assembly. Returns Type Description Assembly The loaded assembly. | Edit this page View Source LoadFromStream(Stream, Stream?) Loads the assembly with a common object file format (COFF)-based image containing a managed assembly, optionally including symbols for the assembly. Declaration public Assembly LoadFromStream(Stream assembly, Stream? assemblySymbols) Parameters Type Name Description Stream assembly A byte array that is a COFF-based image containing a managed assembly. Stream assemblySymbols A byte array that contains the raw bytes representing the symbols for the assembly. Returns Type Description Assembly The loaded assembly. | Edit this page View Source LoadUnmanagedDll(string) Allows derived class to load an unmanaged library by name. Declaration protected virtual nint LoadUnmanagedDll(string unmanagedDllName) Parameters Type Name Description string unmanagedDllName Name of the unmanaged library. Typically this is the filename without its path or extensions. Returns Type Description nint A handle to the loaded library, or Zero. | Edit this page View Source LoadUnmanagedDllFromPath(string) Loads an unmanaged library from the specified path. Declaration protected nint LoadUnmanagedDllFromPath(string unmanagedDllPath) Parameters Type Name Description string unmanagedDllPath The path to the unmanaged library. Returns Type Description nint The OS handle for the loaded native library. | Edit this page View Source SetProfileOptimizationRoot(string) Sets the root path where the optimization profiles for this load context are stored. Declaration public void SetProfileOptimizationRoot(string directoryPath) Parameters Type Name Description string directoryPath The full path to the directory where the optimization profiles are stored. | Edit this page View Source StartProfileOptimization(string?) Starts the profile optimization for the specified profile. Declaration public void StartProfileOptimization(string? profile) Parameters Type Name Description string profile The name of the optimization profile. | Edit this page View Source Unload() Initiates an unload of this VerifiableAssemblyLoader. Declaration public void Unload() Events | Edit this page View Source Resolving Occurs when the resolution of an assembly fails when attempting to load into this assembly load context. Declaration public event Func<AssemblyLoadContext, AssemblyName, Assembly?>? Resolving Event Type Type Description Func<AssemblyLoadContext, AssemblyName, Assembly> | Edit this page View Source ResolvingUnmanagedDll Occurs when the resolution of a native library fails. Declaration public event Func<Assembly, string, nint>? ResolvingUnmanagedDll Event Type Type Description Func<Assembly, string, nint> | Edit this page View Source Unloading Occurs when the VerifiableAssemblyLoader is unloaded. Declaration public event Action<AssemblyLoadContext>? Unloading Event Type Type Description Action<AssemblyLoadContext>"
  },
  "api/Dwyer.JitIlVerification.html": {
    "href": "api/Dwyer.JitIlVerification.html",
    "title": "Namespace Dwyer.JitIlVerification | JitIlVerification",
    "keywords": "Namespace Dwyer.JitIlVerification Classes VerifiableAssemblyLoader Provides scoped assembly loading with the same semantics as AssemblyLoadContext. Any assemblies loaded with this context will be checked for type/memory safety issues. Any unverifiable methods with throw an exception upon invocation."
  },
  "index.html": {
    "href": "index.html",
    "title": "JitIlVerification | JitIlVerification",
    "keywords": "JitIlVerification This project implements the verification of .NET assemblies at runtime. Verified assemblies are guaranteed to have valid Common Intermediate Language (CIL) bytecode, and cannot directly cause memory unsafety or undefined behavior. This project is a fork of the Microsoft.ILVerification library, which verifies assemblies by loading them (and all of their dependencies) from disk. The original library functions mainly as a compile-time static analysis tool. It is unsuited for verification of assemblies that a deployed application is loading, because the system libraries or other dependencies may not be known or available on disk. The main contribution of JitIlVerification is to integrate Microsoft's verification library with the C# runtime type system, so that assembly validation can occur at runtime. Why use this The original .NET runtime for Windows came with CIL verification. Whenever an assembly was loaded, if the assembly had partial/low trust (because it was loaded from an untrusted source, like the web) the runtime would verify the assembly to ensure that its CIL was valid. In .NET Core, however, this functionality has been removed. The .NET Core runtime will accept and load invalid or unsafe CIL. This makes it impossible to sandbox C# assemblies or load code from an untrusted source, since that code could have undefined behavior. This library re-adds runtime CIL verification. How to use this JitIlVerification defines a single public type - the VerifiableAssemblyLoader. This is a drop-in replacement for a System.Runtime.AssemblyLoadContext, but any assemblies loaded with the VerifiableAssemblyLoader will be checked for invalid CIL. If an invalid method from the assembly is called, an exception will immediately be thrown. How it works Whenever an assembly is loaded with VerifiableAssemblyLoader, the assembly bytecode is modified using Mono.Cecil. Guard instructions are inserted at the beginning of every CIL method. The assembly is loaded normally by the .NET Core runtime. When one of the guard instructions is hit for the first time, it passes the declaring method handle to the ILVerification algorithm. The algorithm loads the method bytecode using reflection and verifies it using the runtime type system. If the method was verifiable, then it will run successfully. Otherwise, any attempt to call the method will throw an exception."
  }
}